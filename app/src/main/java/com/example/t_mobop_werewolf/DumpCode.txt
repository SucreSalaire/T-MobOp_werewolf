
Removed from MainActivity.kt on the 10Dec2020 13h15 (NAGI)

    // Function used to attach a listener to the StoryState value in the database
    // Should be used by everyone when joining the room or starting the game
    // Update : not used till GeneralDataModel has been implemented
    fun AttachListenerStoryState(){
        ref_StoryState = Firebase.database.reference.child("GeneralData").child("StoryState")
        ref_StoryState.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                if (snapshot.exists()) {
                    val value = snapshot.getValue(String::class.java)
                    Toast.makeText(applicationContext, "Changed : $value", Toast.LENGTH_SHORT).show()
                }
            }
            override fun onCancelled(error: DatabaseError) {
                Toast.makeText(applicationContext, "Error database", Toast.LENGTH_SHORT).show()
            }
        })
    }

    fun DetachListenerStoryState(){}

    fun AttachSingleEventListener(){}


____________________________________________________________________________________________________
GeneralDataModel.kt         on 17Dec2020

mValueDataListener = object: ValueEventListener
        {
            override fun onDataChange(snapshot: DataSnapshot) {
                try
                {
                    Log.d("GeneralDataModel", "data updated")
                    //val dataUpdated: ArrayList<GeneralData> = ArrayList()
                    val dataHash: HashMap<String,String> = HashMap<String,String>()
                    val list: ArrayList<String?> = ArrayList()

                    if (snapshot != null)
                    {
                        for (items: DataSnapshot in snapshot.children) {
                            try {
                                val value = snapshot.getValue(String::class.java)
                                list.add(value)
                                //dataUpdated.add(GeneralData(items)) something like that
                            } catch (e: Exception) {
                                e.printStackTrace()
                                Log.d("GeneralDataModel", "Can't take value from DB")}
                        }
                        mDataList = list
                        Log.d("GeneralDataModel", "data updated, size: " + list!!.size)
                        setChanged()
                        notifyObservers()
                    }
                } catch (e: Exception) { e.printStackTrace() }
            }

            override fun onCancelled(error: DatabaseError) {
                if (error != null) {
                    Log.i("DataModel", "data upload canceled, error = $(error.message)")
                }
            }
        } // mValueDataListener



Place here other code pieces you want to keep