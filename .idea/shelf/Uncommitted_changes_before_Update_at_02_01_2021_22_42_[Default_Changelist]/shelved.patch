Index: app/src/main/res/layout/fragment_actions_noactions.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"@android:color/holo_blue_light\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"You currently can't do any actions\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_actions_noactions.xml	(revision 92ef64fe6ef5995b64c64729dca6a7967cf44ee7)
+++ app/src/main/res/layout/fragment_actions_noactions.xml	(date 1609622754940)
@@ -1,11 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:background="@android:color/holo_blue_light">
+    android:background="@color/dayBackground2">
 
     <TextView
         android:id="@+id/textView"
Index: app/src/main/java/com/example/t_mobop_werewolf/PlayingHostActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.t_mobop_werewolf\r\n\r\nimport android.content.Context\r\nimport android.graphics.Color\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.GeneratedAdapter\r\nimport com.example.t_mobop_werewolf.FirebaseData.GeneralDataModel\r\nimport com.example.t_mobop_werewolf.FirebaseData.StoryState\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\n\r\n\r\nclass PlayingHostActivity : AppCompatActivity() {\r\n\r\n    var roomName = GeneralDataModel.localRoomName\r\n    var storyState: Double = 0.0\r\n    var flagData = Firebase.database.reference.child(\"$roomName/GeneralData/Flag\")\r\n    val fragment_actions = Frag_Actions_NoActions()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_playing)\r\n\r\n        val fragment_actions = Frag_WaitingRoom()\r\n\r\n        // These lines will be modified to display from the data received from Firebase\r\n        // This text will be created only at the game start, won't change after\r\n        val player_role = findViewById<TextView>(R.id.textview_PlayerRole)\r\n        player_role.text = GeneralDataModel.getPlayerRole(GeneralDataModel.localPseudo)\r\n\r\n        val player_name = GeneralDataModel.localPseudo\r\n\r\n        val story = findViewById<TextView>(R.id.textview_storytelling)\r\n        story.text = \"The night falls on the quiet village.\" // later controlled by Firebase\r\n\r\n        val playersList = findViewById<ListView>(R.id.listview_Players)\r\n        playersList.setBackgroundColor(Color.parseColor(\"#FFFFFF\"))\r\n\r\n        // should be received by Firebase\r\n        val names = GeneralDataModel.getPlayersPseudos(GeneralDataModel.localRoomName)\r\n\r\n        fun getCount(): Int {return names.size}\r\n        var k: Int = 1\r\n        // Create RadioButton dynamically\r\n        for(players in names){\r\n            val radioButton = RadioButton(this)\r\n            radioButton.layoutParams= LinearLayout.LayoutParams(\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT)\r\n            radioButton.setPadding(24,0,0,16)\r\n            radioButton.setText(players)\r\n            radioButton.id = k //TODO verifier le type\r\n            k++\r\n\r\n            findViewById<RadioGroup>(R.id.playersRadioGroup)?.addView(radioButton)\r\n        }\r\n\r\n        //---\r\n        // ---x--- Firebase database listener for the Flag variable ---x---\r\n        flagData.addValueEventListener(object: ValueEventListener\r\n        {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                if (snapshot.exists()) {\r\n\r\n                    Log.d(\"StoryState\", \"Data updated\")\r\n                    //Toast.makeText(applicationContext, \"data changed: $storyState\", Toast.LENGTH_SHORT).show()\r\n                    storyState = chooseActions()   // this function is called every time StoryState is updated\r\n                    changeFragment(storyState)\r\n                }\r\n            }\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Toast.makeText(applicationContext, \"Error database for storyState\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        })\r\n        //---\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        // add code to remove listener\r\n    }\r\n\r\n    // THIS FUNCTION IS CALLED EVERY TIME a database VALUE IS UPDATED !!!! ADD ACTIONS HERE\r\n    // This function decide what's the next storyState\r\n    private fun chooseActions() : Double{\r\n        Toast.makeText(this, \"Function chooseActions() called\", Toast.LENGTH_SHORT).show()\r\n        var nextState : Double = 0.0\r\n\r\n        if (storyState == 4.0) { // werewolf turn\r\n            val voted = GeneralDataModel.validateVote(roomName, \"Werewolf\")\r\n            if(voted){\r\n                val nextState = GeneralDataModel.nextState(storyState)\r\n                Toast.makeText(this, \"Werewolf voted\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n        else if (storyState == 10.0){ // villager voting time\r\n            val voted = GeneralDataModel.validateVote(roomName, \"Villager\")\r\n            if (voted){\r\n                val nextState = GeneralDataModel.nextState(storyState)\r\n                Toast.makeText(this, \"Everybody voted\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n        else{\r\n            val nextState = GeneralDataModel.nextState(storyState)\r\n            Toast.makeText(this, \" Going to next story state\", Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n        return(nextState)\r\n    }\r\n\r\n    private fun changeFragment(story : Double){\r\n        var currentFrag = R.layout.fragment_actions_villager\r\n\r\n        if (getStoryRoleName(story) == GeneralDataModel.localRole){\r\n            when(GeneralDataModel.localRole){\r\n                \"werewolf\" -> currentFrag = R.layout.fragment_actions_werewolf\r\n                \"witch\" -> currentFrag = R.layout.fragment_actions_witch\r\n                \"fortuneTeller\" -> currentFrag = R.layout.fragment_actions_fortuneteller\r\n            }\r\n        }\r\n        else{\r\n            when(story){\r\n                1.0 -> currentFrag = R.layout.fragment_actions_player\r\n                2.0 -> currentFrag = R.layout.fragment_actions_villager\r\n            }\r\n        }\r\n\r\n        val transaction = supportFragmentManager.beginTransaction()\r\n        transaction.replace(R.layout.fragment_actions_fortuneteller.toInt(), fragment_actions)\r\n        transaction.commit()\r\n    }\r\n\r\n    private fun getStoryRoleName(story : Double) : String{\r\n        when(story){\r\n            3.0 -> return \"werewolf\"\r\n            4.0 -> return \"witch\"\r\n            5.0 -> return \"fortuneTeller\"\r\n        }\r\n        return \"None\"\r\n    }\r\n\r\n    // --------------------x-----------------------------------\r\n    // Adapter for the list displaying all the players\r\n    private class PlayersListAdapter(context : Context) : BaseAdapter() {\r\n        private val mContext : Context = context\r\n\r\n        // should be received by Firebase\r\n        private val names = arrayListOf<String>(\r\n            \"Jean\", \"Jeanette\", \"Charles\", \"Alphonse\", \"Madeleine\", \"Cl√©mentine\")\r\n\r\n        override fun getCount(): Int {return names.size}\r\n\r\n        override fun getItem(position: Int): Any {return \"\"}\r\n\r\n        override fun getItemId(position: Int): Long {return position.toLong()}\r\n\r\n        override fun getView(position: Int, convertView: View?, viewGroup: ViewGroup?): View {\r\n            val layoutInflater = LayoutInflater.from(mContext)\r\n            val rowMain = layoutInflater.inflate(R.layout.row_players_list,viewGroup, false)\r\n            val playerName = rowMain.findViewById<TextView>(R.id.playerName)\r\n            playerName.text = names.get(position)\r\n            return rowMain\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/t_mobop_werewolf/PlayingHostActivity.kt	(revision 92ef64fe6ef5995b64c64729dca6a7967cf44ee7)
+++ app/src/main/java/com/example/t_mobop_werewolf/PlayingHostActivity.kt	(date 1609623613048)
@@ -24,7 +24,7 @@
 class PlayingHostActivity : AppCompatActivity() {
 
     var roomName = GeneralDataModel.localRoomName
-    var storyState: Double = 0.0
+    var storyState: Long = 0
     var flagData = Firebase.database.reference.child("$roomName/GeneralData/Flag")
     val fragment_actions = Frag_Actions_NoActions()
 
@@ -100,26 +100,26 @@
         if (storyState == 4.0) { // werewolf turn
             val voted = GeneralDataModel.validateVote(roomName, "Werewolf")
             if(voted){
-                val nextState = GeneralDataModel.nextState(storyState)
+                val nextState = GeneralDataModel.nextStage(storyState as Long)
                 Toast.makeText(this, "Werewolf voted", Toast.LENGTH_SHORT).show()
             }
         }
         else if (storyState == 10.0){ // villager voting time
             val voted = GeneralDataModel.validateVote(roomName, "Villager")
             if (voted){
-                val nextState = GeneralDataModel.nextState(storyState)
+                val nextState = GeneralDataModel.nextStage(storyState as Long)
                 Toast.makeText(this, "Everybody voted", Toast.LENGTH_SHORT).show()
             }
         }
         else{
-            val nextState = GeneralDataModel.nextState(storyState)
+            val nextState = GeneralDataModel.nextStage(storyState as Long)
             Toast.makeText(this, " Going to next story state", Toast.LENGTH_SHORT).show()
         }
 
         return(nextState)
     }
 
-    private fun changeFragment(story : Double){
+    public fun changeFragment(story : Double){
         var currentFrag = R.layout.fragment_actions_villager
 
         if (getStoryRoleName(story) == GeneralDataModel.localRole){
@@ -131,7 +131,7 @@
         }
         else{
             when(story){
-                1.0 -> currentFrag = R.layout.fragment_actions_player
+                1.0 -> currentFrag = R.layout.fragment_actions_noactions
                 2.0 -> currentFrag = R.layout.fragment_actions_villager
             }
         }
Index: app/src/main/java/com/example/t_mobop_werewolf/PlayingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.t_mobop_werewolf\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.graphics.Color\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport com.example.t_mobop_werewolf.FirebaseData.GeneralDataModel\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\n\r\n\r\nclass PlayingActivity : AppCompatActivity() {\r\n\r\n    var roomName = GeneralDataModel.localRoomName\r\n    var storyState: Long = 0\r\n    var storyStateRef = Firebase.database.reference.child(\"$roomName/GeneralData/StoryState\")\r\n\r\n    @SuppressLint(\"ResourceType\") // TODO: What's that ?\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_playing)\r\n\r\n        // These lines will be modified to display from the data received from Firebase\r\n        // This text will be created only at the game start, won't change after\r\n        val player_role = findViewById<TextView>(R.id.textview_PlayerRole)\r\n        player_role.text = GeneralDataModel.getPlayerRole(GeneralDataModel.localPseudo)\r\n\r\n        val player_name = GeneralDataModel.localPseudo\r\n\r\n        val story = findViewById<TextView>(R.id.textview_storytelling)\r\n        story.text = \"The night falls on the quiet village.\" // TODO: later controlled by StoryState\r\n\r\n        val playersList = findViewById<ListView>(R.id.listview_Players)\r\n        playersList.setBackgroundColor(Color.parseColor(\"#FFFFFF\"))\r\n        //playersList.adapter = PlayersListAdapter(this)\r\n\r\n        // should be received by Firebase\r\n        val names = GeneralDataModel.getPlayersPseudos(GeneralDataModel.localRoomName)\r\n\r\n        fun getCount(): Int {return names.size}\r\n        var k: Int = 1\r\n        // Create RadioButton dynamically\r\n        for(players in names){\r\n            val radioButton = RadioButton(this)\r\n            radioButton.layoutParams= LinearLayout.LayoutParams(\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT)\r\n            radioButton.setPadding(24,0,0,16)\r\n            radioButton.text = players\r\n            val nb = GeneralDataModel.localPlayerNb.toString()\r\n\r\n            if (radioButton.text == GeneralDataModel.localPseudo\r\n                || GeneralDataModel.getAnyData(\"$roomName/Players/Player$nb/Role\") != \"Witch\") radioButton.isClickable.not()\r\n\r\n\r\n            if(GeneralDataModel.getAnyData(\"$roomName/Players/Player$nb/Role\") == \"Werewolf\"\r\n                && GeneralDataModel.getAnyData(\"$roomName/Players/Player$k/Role\") == \"Werewolf\") radioButton.isClickable.not()\r\n\r\n            radioButton.id = k\r\n            k += 1\r\n\r\n            findViewById<RadioGroup>(R.id.playersRadioGroup)?.addView(radioButton)\r\n        }\r\n\r\n\r\n        // ---x--- Firebase database listener for the StoryState variable ---x---\r\n        storyStateRef.addValueEventListener(object: ValueEventListener\r\n        {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n            if (snapshot.exists()) {\r\n                storyState = snapshot.value as Long\r\n                Log.d(\"StoryState\", \"Data updated\")\r\n                Toast.makeText(applicationContext, \"StoryState changed: $storyState\", Toast.LENGTH_SHORT).show()\r\n                nextActions()   // this function is called every time StoryState is updated\r\n            }\r\n        }\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Toast.makeText(applicationContext, \"Error database for storyState\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        })\r\n    }   // onCreate\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        // add code to remove listener\r\n    }\r\n\r\n\r\n    // THIS FUNCTION IS CALLED EVERY TIME THE STORYSTATE VALUE IS UPDATED !!!! ADD ACTIONS HERE\r\n    private fun nextActions(){\r\n        Toast.makeText(this, \"Function nextActions() called\", Toast.LENGTH_SHORT).show()\r\n        // Here can be added another call for a function in the fragment that will receive the\r\n        // new StoryState value and do his thing\r\n    }\r\n\r\n\r\n\r\n    // --------------------x-----------------------------------\r\n    // Adapter for the list displaying all the players\r\n    private class PlayersListAdapter(context : Context) : BaseAdapter() {\r\n        private val mContext : Context = context\r\n\r\n        // should be received by Firebase\r\n        private val names = GeneralDataModel.getPlayersPseudos(GeneralDataModel.localRoomName)\r\n\r\n        override fun getCount(): Int {return names.size}\r\n\r\n        override fun getItem(position: Int): Any {return \"\"}\r\n\r\n        override fun getItemId(position: Int): Long {return position.toLong()}\r\n\r\n        override fun getView(position: Int, convertView: View?, viewGroup: ViewGroup?): View {\r\n            val layoutInflater = LayoutInflater.from(mContext)\r\n            val rowMain = layoutInflater.inflate(R.layout.row_players_list,viewGroup, false)\r\n            val playerName = rowMain.findViewById<TextView>(R.id.playerName)\r\n            playerName.text = names.get(position)\r\n            return rowMain\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/t_mobop_werewolf/PlayingActivity.kt	(revision 92ef64fe6ef5995b64c64729dca6a7967cf44ee7)
+++ app/src/main/java/com/example/t_mobop_werewolf/PlayingActivity.kt	(date 1609623232324)
@@ -80,8 +80,9 @@
                 storyState = snapshot.value as Long
                 Log.d("StoryState", "Data updated")
                 Toast.makeText(applicationContext, "StoryState changed: $storyState", Toast.LENGTH_SHORT).show()
-                nextActions()   // this function is called every time StoryState is updated
+                PlayingHostActivity().changeFragment(storyState as Double) // this function is called every time StoryState is updated
             }
+
         }
             override fun onCancelled(error: DatabaseError) {
                 Toast.makeText(applicationContext, "Error database for storyState", Toast.LENGTH_SHORT).show()
