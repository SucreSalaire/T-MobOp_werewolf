Index: app/src/main/java/com/example/t_mobop_werewolf/FirebaseData/GeneralDataModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.t_mobop_werewolf.FirebaseData\r\n\r\nimport android.content.Intent\r\nimport android.util.Log\r\nimport androidx.core.content.ContextCompat.startActivity\r\nimport com.example.t_mobop_werewolf.PlayingActivity\r\nimport com.example.t_mobop_werewolf.WaitingRoomActivity\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.firebase.database.*\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\nimport java.util.*\r\n\r\n/*\r\n    This object allows to communicate with the Firebase Realtime Database.\r\n        Data is accessible in a local snapshot and is updated on any change (method onDataChange())\r\n        The Database has a listener attached to it that allows to automatically update it.\r\n\r\n\r\n    The following function are usable anywhere in the project to access a value from the\r\n    database:\r\n\r\n\r\n        GeneralDataModel.createRoom(RoomName: String, NbPlayers: Int, HostName: String ): Boolean\r\n        GeneralDataModel.joinRoom(RoomName: String, Pseudo: String): Boolean\r\n        GeneralDataModel.setupAndStartGame()\r\n        GeneralDataModel.getPlayersNumber(RoomName: String): Int\r\n        GeneralDataModel.getAnyData(Path: String): Any\r\n        GeneralDataModel.getStoryState(RoomName: String): Double\r\n        GeneralDataModel.changeStoryState(RoomName: String, NextState: Double) : Boolean\r\n        GeneralDataModel.getPlayerRole(RoomName: String, PlayerPseudo: String): String\r\n        GeneralDataModel.killPlayer(RoomName: String, PlayerPseudo: String): Boolean\r\n        GeneralDataModel.localSnapshotInit()\r\n        GeneralDataModel.setupDatabaseAsDefault()\r\n\r\n\r\n */\r\n\r\nobject GeneralDataModel: Observable()\r\n{\r\n    private var TAG = \"GeneralDataModel\"\r\n    private var database = Firebase.database.reference\r\n    private fun getDatabaseRef() : DatabaseReference? {\r\n        return FirebaseDatabase.getInstance().reference}\r\n\r\n    // Event listener attached to the database root\r\n    private var mGeneralListener: ValueEventListener? = null\r\n\r\n    // Local variables containing the database values\r\n    lateinit var localSnapshot: DataSnapshot\r\n    var localRoomName: String = \"None\"\r\n    var localPseudo: String = \"None\"\r\n    var localRole: String = \"None\"\r\n    var iAmtheHost: Boolean = false\r\n\r\n    init\r\n    {\r\n        if (mGeneralListener != null) {getDatabaseRef()?.removeEventListener(mGeneralListener!!)}\r\n        mGeneralListener = null\r\n\r\n        mGeneralListener = object: ValueEventListener\r\n        {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                try\r\n                {\r\n                    if (snapshot != null)\r\n                    {\r\n                        localSnapshot = snapshot\r\n                        Log.d(TAG, \"Data updated\")\r\n                        setChanged()\r\n                        notifyObservers()\r\n                    }\r\n                } catch (e: Exception) { e.printStackTrace() }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Log.d(TAG, \"Updated snapshot download cancelled!\")}\r\n\r\n        } // mValueDataListener\r\n        getDatabaseRef()?.addValueEventListener(mGeneralListener!!)\r\n    } // init\r\n\r\n\r\n\r\n\r\n    //                                      ---------x---------\r\n    //                                      Firebase Functions\r\n\r\n\r\n\r\n    fun createRoom(RoomName: String, NbPlayers: Int, HostName: String ): Boolean\r\n    {\r\n        Log.d(TAG, \"Fun createRoom() called\")\r\n        var roomAlreadyOpen: Boolean = false\r\n        try\r\n        {\r\n            for (item: DataSnapshot in localSnapshot.child(\"Rooms\").children){\r\n                Log.d(TAG, \"ExistingRooms: ${item.key.toString()}\")\r\n                if (item.key.toString() == RoomName) {\r\n                    Log.d(TAG, \"Room already exists\")\r\n                    roomAlreadyOpen = true\r\n                }\r\n            }\r\n            if (roomAlreadyOpen.not()){\r\n                Log.d(TAG, \"Creating new room: $RoomName\")\r\n                database.child(\"0_Rooms/$RoomName\").setValue(\"Open\")\r\n                database.child(\"$RoomName/GeneralData/GameStarted\").setValue(false)\r\n                database.child(\"$RoomName/GeneralData/HostName\").setValue(HostName)\r\n                database.child(\"$RoomName/GeneralData/MaxPlayers\").setValue(NbPlayers)\r\n                database.child(\"$RoomName/GeneralData/NbPlayers\").setValue(1)\r\n                database.child(\"$RoomName/GeneralData/RolesDistributed\").setValue(false)\r\n                database.child(\"$RoomName/GeneralData/RoomName\").setValue(RoomName)\r\n                database.child(\"$RoomName/GeneralData/StoryState\").setValue(0.0)\r\n                database.child(\"$RoomName/GeneralData/WaitingRoomOpen\").setValue(false)\r\n                database.child(\"$RoomName/GeneralData/Flag\").setValue(false)\r\n\r\n                database.child(\"$RoomName/Players/Player1/Alive\").setValue(true)\r\n                database.child(\"$RoomName/Players/Player1/Pseudo\").setValue(HostName)\r\n                database.child(\"$RoomName/Players/Player1/Role\").setValue(\"None\")\r\n                database.child(\"$RoomName/Players/Player1/Voted\").setValue(false)\r\n                database.child(\"$RoomName/Players/Player1/Votes\").setValue(0)\r\n                database.child(\"$RoomName/Players/Player1/Werewolf\").setValue(false)\r\n\r\n                database.child(\"$RoomName/RolesData/PotionKill\").setValue(1)\r\n                database.child(\"$RoomName/RolesData/PotionSave\").setValue(1)\r\n\r\n                localRoomName = RoomName\r\n                localPseudo = HostName\r\n                iAmtheHost = true\r\n            }\r\n        } catch (e: Exception) { e.printStackTrace() }\r\n        return roomAlreadyOpen.not()\r\n    }\r\n\r\n\r\n    fun joinRoom(RoomName: String, Pseudo: String) : Boolean{\r\n        // Add check if player already exists\r\n        // Add check for max players\r\n        Log.d(TAG, \"Fun joinRoom() called\")\r\n        var joinSuccess : Boolean = false\r\n        if (localSnapshot.child(\"Rooms/$RoomName\").value.toString() == \"Open\")\r\n        {\r\n            try\r\n            {\r\n                val nbPlayer = getPlayersNumber(RoomName) + 1\r\n                database.child(\"$RoomName/Players/Player$nbPlayer/Alive\").setValue(true)\r\n                database.child(\"$RoomName/Players/Player$nbPlayer/Pseudo\").setValue(Pseudo)\r\n                database.child(\"$RoomName/Players/Player$nbPlayer/Role\").setValue(\"None\")\r\n                database.child(\"$RoomName/Players/Player$nbPlayer/Voted\").setValue(false)\r\n                database.child(\"$RoomName/Players/Player$nbPlayer/Votes\").setValue(0)\r\n                database.child(\"$RoomName/Players/Player$nbPlayer/Werewolf\").setValue(false)\r\n                database.child(\"$RoomName/GeneralData/NbPlayers\").setValue(nbPlayer)\r\n                localRoomName = RoomName\r\n                localPseudo = Pseudo\r\n                iAmtheHost = false\r\n                Log.d(TAG, \"Fun joinRoom() success\")\r\n                joinSuccess = true\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                Log.d(TAG, \"Fun joinRoom() failed\")\r\n                joinSuccess = false\r\n            }\r\n        } else {\r\n            Log.d(TAG, \"Room: $RoomName is closed, sorry.\")\r\n            joinSuccess = false\r\n        }\r\n        return joinSuccess\r\n    }\r\n\r\n\r\n    fun setupAndStartGame()\r\n    {\r\n        Log.d(TAG, \"Fun setupAndStartGame()\")\r\n        //database.child(\"Rooms/$localRoomName\").setValue(\"Closed\")\r\n\r\n        // Here can be added all the code necessary to configure special rules or any other\r\n        // parameters related to the gameplay\r\n\r\n        try{\r\n            distributeRoles()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            Log.d(TAG, \"Fun setupAndStartGame()/distributeRoles() failed\")\r\n        }\r\n        database.child(\"$localRoomName/GeneralData/GameStarted\").setValue(true)\r\n        try{\r\n            changeStoryState(1.0)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            Log.d(TAG, \"Fun setupAndStartGame()/changeStoryState(1.0) failed\")\r\n        }\r\n\r\n    }\r\n\r\n    private fun distributeRoles()\r\n    {\r\n        Log.d(TAG, getPlayersNumber(localRoomName).toString())\r\n        when(getPlayersNumber(localRoomName))\r\n        {\r\n            3.toLong() ->\r\n            {\r\n                Log.d(TAG, \"fun distributeRoles(3)\")\r\n                database.child(\"$localRoomName/Players/Player1/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player2/Role\").setValue(\"Werewolf\")\r\n                database.child(\"$localRoomName/Players/Player3/Role\").setValue(\"Witch\")\r\n            }\r\n            4.toLong() ->\r\n            {\r\n                Log.d(TAG, \"fun distributeRoles(4)\")\r\n                database.child(\"$localRoomName/Players/Player1/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player2/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player3/Role\").setValue(\"Werewolf\")\r\n                database.child(\"$localRoomName/Players/Player4/Role\").setValue(\"Witch\")\r\n            }\r\n            5.toLong() ->\r\n            {\r\n                Log.d(TAG, \"fun distributeRoles(5)\")\r\n                database.child(\"$localRoomName/Players/Player1/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player2/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player3/Role\").setValue(\"Werewolf\")\r\n                database.child(\"$localRoomName/Players/Player4/Role\").setValue(\"Werewolf\")\r\n                database.child(\"$localRoomName/Players/Player5/Role\").setValue(\"Witch\")\r\n            }\r\n            6.toLong() ->\r\n            {\r\n                Log.d(TAG, \"fun distributeRoles(6)\")\r\n                database.child(\"$localRoomName/Players/Player1/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player2/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player3/Role\").setValue(\"Villager\")\r\n                database.child(\"$localRoomName/Players/Player4/Role\").setValue(\"Werewolf\")\r\n                database.child(\"$localRoomName/Players/Player5/Role\").setValue(\"Werewolf\")\r\n                database.child(\"$localRoomName/Players/Player6/Role\").setValue(\"Witch\")\r\n            }\r\n            else -> Log.d(TAG, \"fun distributeRoles(): wrong number of players\")\r\n        }\r\n    }\r\n\r\n    fun getPlayersNumber(RoomName: String): Long {\r\n        val value: Long\r\n        if (localSnapshot.child(\"$RoomName/GeneralData/NbPlayers\").exists()){\r\n            value = localSnapshot.child(\"$RoomName/GeneralData/NbPlayers\").value as Long\r\n        } else {\r\n            value = 1 //0(testing)\r\n        }\r\n        return value\r\n    }\r\n\r\n    fun getPlayersPseudos(RoomName: String): ArrayList<String>{\r\n        var nbPlayers = getPlayersNumber(RoomName)\r\n        var playersPseudoArray = ArrayList<String>()\r\n        for (i in 1..nbPlayers)\r\n        {\r\n            if (localSnapshot.child(\"$RoomName/Players/Player${i.toString()}/Pseudo\").exists()){\r\n                playersPseudoArray.add(localSnapshot.child(\"$RoomName/Players/Player${i.toString()}/Pseudo\").value as String)\r\n            } else {\r\n                Log.d(TAG, \"fun getPlayersPseudo() failed\")\r\n            }\r\n\r\n        }\r\n        return playersPseudoArray\r\n    }\r\n\r\n    fun getPlayersVotes(RoomName: String): ArrayList<Int>{\r\n        var nbPlayers = getPlayersNumber(RoomName)\r\n        var playersVotesArray = ArrayList<Int>()\r\n        for (i in 1..nbPlayers)\r\n        {\r\n            playersVotesArray.add(localSnapshot.child(\"$RoomName/Players/Player$i/Votes\").value as Int)\r\n        }\r\n        return playersVotesArray\r\n    }\r\n\r\n    fun validateVote(RoomName: String, voteType: String  ): Boolean{\r\n        var nbPlayers = getPlayersNumber(RoomName)\r\n        var voteFlag: Boolean = true// set le flag a true\r\n        when (voteType){\r\n            \"Villager\" ->\r\n                for (i in 1..nbPlayers) // check all flags\r\n                {\r\n                    if (!(localSnapshot.child(\"$RoomName/Players/Player$i/Voted\").value as Boolean)) voteFlag = false\r\n                }\r\n            \"Werewolf\" ->\r\n                for (i in 1..nbPlayers) // check all flags\r\n                {\r\n                    if (!(localSnapshot.child(\"$RoomName/Players/Player$i/Voted\").value as Boolean)\r\n                        && localSnapshot.child(\"$RoomName/Players/Player$i/Werewolf\").value as Boolean ) voteFlag = false\r\n                }\r\n        }\r\n        return voteFlag\r\n    }\r\n\r\n    fun getAnyData(Path: String): Any {\r\n        return localSnapshot.child(Path).value as Any\r\n    }\r\n\r\n    fun setAnyData(Path: String, Value: Any): Boolean {\r\n        Log.d(TAG, \"Fun setAnyData() called\")\r\n        var success: Boolean = false\r\n        success = try{\r\n            database.child(Path).setValue(Value)\r\n            true\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            Log.d(TAG, \"Fun setAnyData() failed\")\r\n            false\r\n        }\r\n        return success\r\n    }\r\n\r\n    fun getStoryState() : Double {\r\n        return localSnapshot.child(\"$localRoomName/GeneralData/StoryState\").value as Double\r\n    }\r\n\r\n    fun changeStoryState(NextState: Double) : Boolean {\r\n        return try{\r\n            database.child(\"$localRoomName/GeneralData/StoryState\").setValue(NextState)\r\n            true\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            Log.d(TAG, \"fun changeStoryState failed\")\r\n            false\r\n        }\r\n    }\r\n\r\n    fun getPlayerRole(PlayerPseudo: String): String {\r\n        return try{\r\n            localSnapshot.child(\"$localRoomName/Players/$PlayerPseudo/Role\").value as String\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            Log.d(TAG, \"fun getPlayerRole failed\")\r\n            \"Failed\"\r\n        }\r\n    }\r\n\r\n    fun killPlayer(PlayerPseudo: String): Boolean {\r\n        // add role dependant kill count in DB\r\n        return try{\r\n            database.child(\"$localRoomName/GeneralData/Players/$PlayerPseudo/Alive\").setValue(false)\r\n            true\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            Log.d(TAG, \"fun killPlayer failed\")\r\n            false\r\n        }\r\n    }\r\n\r\n    fun localSnapshotInit() {\r\n        FirebaseDatabase.getInstance().reference.addListenerForSingleValueEvent(\r\n            object: ValueEventListener\r\n            {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    if (snapshot.exists()){\r\n                        localSnapshot = snapshot\r\n                        Log.d(TAG, \"localSnapshot single updated at startup\")\r\n                    }\r\n                }\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    Log.d(TAG, \"Fun singleRead() cancelled\")\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Must be used only once !!! Otherwise will reinitialize all the game\r\n    fun resetAllDatabase(){\r\n        //database = Firebase.database.reference\r\n        database.removeValue()              // removes everything at the root\r\n        Log.d(TAG, \"Database has been cleared.\")\r\n\r\n        database.child(\"0_NbPhoneConnected\").setValue(0)\r\n        database.child(\"0_Rooms/Room0\").setValue(\"Open\")\r\n\r\n        Log.d(TAG, \"Database has been set to default.\")\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/t_mobop_werewolf/FirebaseData/GeneralDataModel.kt	(revision 03be126a1e8f24727544f541b369d96184e331c0)
+++ app/src/main/java/com/example/t_mobop_werewolf/FirebaseData/GeneralDataModel.kt	(date 1609608581978)
@@ -138,7 +138,7 @@
         // Add check for max players
         Log.d(TAG, "Fun joinRoom() called")
         var joinSuccess : Boolean = false
-        if (localSnapshot.child("Rooms/$RoomName").value.toString() == "Open")
+        if (localSnapshot.child("0_Rooms/$RoomName").value.toString() == "Open")
         {
             try
             {
@@ -250,8 +250,8 @@
         var playersPseudoArray = ArrayList<String>()
         for (i in 1..nbPlayers)
         {
-            if (localSnapshot.child("$RoomName/Players/Player${i.toString()}/Pseudo").exists()){
-                playersPseudoArray.add(localSnapshot.child("$RoomName/Players/Player${i.toString()}/Pseudo").value as String)
+            if (localSnapshot.child("$RoomName/Players/Player$i/Pseudo").exists()){
+                playersPseudoArray.add(localSnapshot.child("$RoomName/Players/Player$i/Pseudo").value as String)
             } else {
                 Log.d(TAG, "fun getPlayersPseudo() failed")
             }
Index: app/src/main/java/com/example/t_mobop_werewolf/PlayingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.t_mobop_werewolf\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.graphics.Color\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport com.example.t_mobop_werewolf.FirebaseData.GeneralDataModel\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\n\r\n\r\nclass PlayingActivity : AppCompatActivity() {\r\n\r\n    var roomName = GeneralDataModel.localRoomName\r\n    var storyState: Double = 0.0\r\n    var storyStateRef = Firebase.database.reference.child(\"$roomName/GeneralData/StoryState\")\r\n\r\n    @SuppressLint(\"ResourceType\") // TODO: What's that ?\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_playing)\r\n\r\n        // These lines will be modified to display from the data received from Firebase\r\n        // This text will be created only at the game start, won't change after\r\n        val player_role = findViewById<TextView>(R.id.textview_PlayerRole)\r\n        player_role.text = GeneralDataModel.localRole\r\n\r\n        val player_name = GeneralDataModel.localPseudo\r\n\r\n        val story = findViewById<TextView>(R.id.textview_storytelling)\r\n        story.text = \"The night falls on the quiet village.\" // TODO: later controlled by StoryState\r\n\r\n        val playersList = findViewById<ListView>(R.id.listview_Players)\r\n        playersList.setBackgroundColor(Color.parseColor(\"#FFFFFF\"))\r\n        //playersList.adapter = PlayersListAdapter(this)\r\n\r\n        // should be received by Firebase\r\n        val names = GeneralDataModel.getPlayersPseudos(GeneralDataModel.localRoomName)\r\n\r\n        fun getCount(): Int {return names.size}\r\n        var k: Int = 1\r\n        // Create RadioButton dynamically\r\n        for(players in names){\r\n            val radioButton = RadioButton(this)\r\n            radioButton.layoutParams= LinearLayout.LayoutParams(\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT)\r\n            radioButton.setPadding(24,0,0,16)\r\n            radioButton.setText(players)\r\n            radioButton.id = k //TODO verifier le type\r\n            k++\r\n\r\n            findViewById<RadioGroup>(R.id.playersRadioGroup)?.addView(radioButton)\r\n        }\r\n\r\n\r\n        // ---x--- Firebase database listener for the StoryState variable ---x---\r\n        storyStateRef.addValueEventListener(object: ValueEventListener\r\n        {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n            if (snapshot.exists()) {\r\n                storyState = snapshot.value as Double\r\n                Log.d(\"StoryState\", \"Data updated\")\r\n                Toast.makeText(applicationContext, \"StoryState changed: $storyState\", Toast.LENGTH_SHORT).show()\r\n                nextActions()   // this function is called every time StoryState is updated\r\n            }\r\n        }\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Toast.makeText(applicationContext, \"Error database for storyState\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        })\r\n    }   // onCreate\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        // add code to remove listener\r\n    }\r\n\r\n\r\n    // THIS FUNCTION IS CALLED EVERY TIME THE STORYSTATE VALUE IS UPDATED !!!! ADD ACTIONS HERE\r\n    private fun nextActions(){\r\n        Toast.makeText(this, \"Function nextActions() called\", Toast.LENGTH_SHORT).show()\r\n        // Here can be added another call for a function in the fragment that will receive the\r\n        // new StoryState value and do his thing\r\n    }\r\n\r\n\r\n\r\n    // --------------------x-----------------------------------\r\n    // Adapter for the list displaying all the players\r\n    private class PlayersListAdapter(context : Context) : BaseAdapter() {\r\n        private val mContext : Context = context\r\n\r\n        // should be received by Firebase\r\n        private val names = GeneralDataModel.getPlayersPseudos(GeneralDataModel.localRoomName)\r\n\r\n        override fun getCount(): Int {return names.size}\r\n\r\n        override fun getItem(position: Int): Any {return \"\"}\r\n\r\n        override fun getItemId(position: Int): Long {return position.toLong()}\r\n\r\n        override fun getView(position: Int, convertView: View?, viewGroup: ViewGroup?): View {\r\n            val layoutInflater = LayoutInflater.from(mContext)\r\n            val rowMain = layoutInflater.inflate(R.layout.row_players_list,viewGroup, false)\r\n            val playerName = rowMain.findViewById<TextView>(R.id.playerName)\r\n            playerName.text = names.get(position)\r\n            return rowMain\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/t_mobop_werewolf/PlayingActivity.kt	(revision 03be126a1e8f24727544f541b369d96184e331c0)
+++ app/src/main/java/com/example/t_mobop_werewolf/PlayingActivity.kt	(date 1609609244507)
@@ -21,7 +21,7 @@
 class PlayingActivity : AppCompatActivity() {
 
     var roomName = GeneralDataModel.localRoomName
-    var storyState: Double = 0.0
+    var storyState: Long = 0
     var storyStateRef = Firebase.database.reference.child("$roomName/GeneralData/StoryState")
 
     @SuppressLint("ResourceType") // TODO: What's that ?
@@ -32,7 +32,7 @@
         // These lines will be modified to display from the data received from Firebase
         // This text will be created only at the game start, won't change after
         val player_role = findViewById<TextView>(R.id.textview_PlayerRole)
-        player_role.text = GeneralDataModel.localRole
+        player_role.text = GeneralDataModel.getPlayerRole(GeneralDataModel.localPseudo)
 
         val player_name = GeneralDataModel.localPseudo
 
@@ -68,7 +68,7 @@
         {
             override fun onDataChange(snapshot: DataSnapshot) {
             if (snapshot.exists()) {
-                storyState = snapshot.value as Double
+                storyState = snapshot.value as Long
                 Log.d("StoryState", "Data updated")
                 Toast.makeText(applicationContext, "StoryState changed: $storyState", Toast.LENGTH_SHORT).show()
                 nextActions()   // this function is called every time StoryState is updated
